(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[615],{4404:function(e,n,t){"use strict";t.r(n),t.d(n,{meta:function(){return l},default:function(){return p}});var o=t(6864),a=t(4730),r=(t(7294),t(3905)),i=["components"],l={name:"Optimization",tableOfContents:{depth:0,children:[{depth:1,slug:"#optimizations",title:"Optimizations",children:[{depth:2,slug:"#dev-only-expressions",title:"Dev-only Expressions",children:[{depth:3,slug:"#rollup-treeshaking",title:"Rollup Treeshaking"},{depth:3,slug:"#advanced-babel-plugin-dev-expressions",title:"Advanced ",children:[{depth:4,slug:"#invariant"},{depth:4,slug:"#warning"}]}]},{depth:2,slug:"#using-lodash",title:"Using lodash"},{depth:2,slug:"#error-extraction",title:"Error extraction"}]}]}},s={meta:l};function p(e){var n=e.components,t=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"optimizations"},"Optimizations"),(0,r.kt)("p",null,"Aside from just bundling your module into different formats, DTS comes with some optimizations for your convenience. They yield objectively better code and smaller bundle sizes."),(0,r.kt)("p",null,"After DTS compiles your code with TypeScript, it processes your code with 3 Babel plugins:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/Andarist/babel-plugin-annotate-pure-calls"},(0,r.kt)("inlineCode",{parentName:"a"},"babel-plugin-annotate-pure-calls")),": Injects for ",(0,r.kt)("inlineCode",{parentName:"li"},"#__PURE")," annotations to enable treeshaking"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/4Catalyzer/babel-plugin-dev-expression"},(0,r.kt)("inlineCode",{parentName:"a"},"babel-plugin-dev-expressions")),": A mirror of Facebook's dev-expression Babel plugin. It reduces or eliminates development checks from production code"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/laat/babel-plugin-transform-rename-import"},(0,r.kt)("inlineCode",{parentName:"a"},"babel-plugin-rename-import")),": Used to rewrite any ",(0,r.kt)("inlineCode",{parentName:"li"},"lodash")," imports")),(0,r.kt)("h2",{id:"dev-only-expressions"},"Dev-only Expressions"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"babel-plugin-annotate-pure-calls")," + ",(0,r.kt)("inlineCode",{parentName:"p"},"babel-plugin-dev-expressions")," work together to fully eliminate dead code (aka treeshake) development checks from your production code. Let's look at an example to see how it works."),(0,r.kt)("p",null,"Imagine our source code is just this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// ./src/index.ts\nexport const sum = (a: number, b: number) => {\n  if (process.env.NODE_ENV !== 'production') {\n    console.log('Helpful dev-only error message');\n  }\n  return a + b;\n};\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"dts build")," will output an ES module file and 3 CommonJS files (dev, prod, and an entry file). If you want to specify a UMD build, you can do that as well. For brevity, let's examine the CommonJS output (comments added for emphasis):")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// Entry File\n// ./dist/index.js\n'use strict';\n\n// This determines which build to use based on the `NODE_ENV` of your end user.\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./mylib.cjs.production.js');\n} else {\n  module.exports = require('./mylib.cjs.development.js');\n}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// CommonJS Development Build\n// ./dist/mylib.cjs.development.js\n'use strict';\n\nconst sum = (a, b) => {\n  {\n    console.log('Helpful dev-only error message');\n  }\n\n  return a + b;\n};\n\nexports.sum = sum;\n//# sourceMappingURL=mylib.cjs.development.js.map\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// CommonJS Production Build\n// ./dist/mylib.cjs.production.js\n'use strict';\nexports.sum = (s, t) => s + t;\n//# sourceMappingURL=test-react-dts-cli.cjs.production.js.map\n")),(0,r.kt)("p",null,"As you can see, DTS stripped out the development check from the production code. ",(0,r.kt)("strong",{parentName:"p"},"This allows you to safely add development-only behavior (like more useful error messages) without any production bundle size impact.")),(0,r.kt)("p",null,"For ESM build, it's up to end-user to build environment specific build with NODE_ENV replace (done by Webpack 4 automatically)."),(0,r.kt)("h3",{id:"rollup-treeshaking"},"Rollup Treeshaking"),(0,r.kt)("p",null,"DTS's rollup config ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/palmerhq/tsdx/blob/1f6a1b6819bb17678aa417f0df5349bec12f59ac/src/createRollupConfig.ts#L73"},"removes getters and setters on objects")," so that property access has no side effects. Don't do it."),(0,r.kt)("h3",{id:"advanced-babel-plugin-dev-expressions"},"Advanced ",(0,r.kt)("inlineCode",{parentName:"h3"},"babel-plugin-dev-expressions")),(0,r.kt)("p",null,"DTS will use ",(0,r.kt)("inlineCode",{parentName:"p"},"babel-plugin-dev-expressions")," to make the following replacements ",(0,r.kt)("em",{parentName:"p"},"before")," treeshaking."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"__DEV__")),(0,r.kt)("p",null,"Replaces"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"if (__DEV__) {\n  console.log('foo');\n}\n")),(0,r.kt)("p",null,"with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"if (process.env.NODE_ENV !== 'production') {\n  console.log('foo');\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"IMPORTANT:")," To use ",(0,r.kt)("inlineCode",{parentName:"p"},"__DEV__")," in TypeScript, you need to add ",(0,r.kt)("inlineCode",{parentName:"p"},"declare var __DEV__: boolean")," somewhere in your project's type path (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"./types/index.d.ts"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"// ./types/index.d.ts\ndeclare var __DEV__: boolean;\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Note:")," The ",(0,r.kt)("inlineCode",{parentName:"p"},"dev-expression")," transform does not run when ",(0,r.kt)("inlineCode",{parentName:"p"},"NODE_ENV")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"test"),". As such, if you use ",(0,r.kt)("inlineCode",{parentName:"p"},"__DEV__"),", you will need to define it as a global constant in your test environment.")),(0,r.kt)("h4",{id:"invariant"},(0,r.kt)("inlineCode",{parentName:"h4"},"invariant")),(0,r.kt)("p",null,"Replaces"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"invariant(condition, 'error message here');\n")),(0,r.kt)("p",null,"with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"if (!condition) {\n  if ('production' !== process.env.NODE_ENV) {\n    invariant(false, 'error message here');\n  } else {\n    invariant(false);\n  }\n}\n")),(0,r.kt)("p",null,"Note: DTS doesn't supply an ",(0,r.kt)("inlineCode",{parentName:"p"},"invariant")," function for you, you need to import one yourself. We recommend ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/alexreardon/tiny-invariant"},"https://github.com/alexreardon/tiny-invariant"),"."),(0,r.kt)("p",null,"To extract and minify ",(0,r.kt)("inlineCode",{parentName:"p"},"invariant")," error codes in production into a static ",(0,r.kt)("inlineCode",{parentName:"p"},"codes.json")," file, specify the ",(0,r.kt)("inlineCode",{parentName:"p"},"--extractErrors")," flag in command line. For more details see ",(0,r.kt)("a",{parentName:"p",href:"#error-extraction"},"Error extraction docs"),"."),(0,r.kt)("h4",{id:"warning"},(0,r.kt)("inlineCode",{parentName:"h4"},"warning")),(0,r.kt)("p",null,"Replaces"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"warning(condition, 'dev warning here');\n")),(0,r.kt)("p",null,"with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"if ('production' !== process.env.NODE_ENV) {\n  warning(condition, 'dev warning here');\n}\n")),(0,r.kt)("p",null,"Note: DTS doesn't supply a ",(0,r.kt)("inlineCode",{parentName:"p"},"warning")," function for you, you need to import one yourself. We recommend ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/alexreardon/tiny-warning"},"https://github.com/alexreardon/tiny-warning"),"."),(0,r.kt)("h2",{id:"using-lodash"},"Using lodash"),(0,r.kt)("p",null,"If you want to use a lodash function in your package, DTS will help you do it the ",(0,r.kt)("em",{parentName:"p"},"right")," way so that your library does not get fat shamed on Twitter. However, before you continue, seriously consider rolling whatever function you are about to use on your own. Anyways, here is how to do it right."),(0,r.kt)("p",null,"First, install ",(0,r.kt)("inlineCode",{parentName:"p"},"lodash")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"lodash-es")," as ",(0,r.kt)("em",{parentName:"p"},"dependencies")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add lodash lodash-es\n")),(0,r.kt)("p",null,"Now install ",(0,r.kt)("inlineCode",{parentName:"p"},"@types/lodash")," to your development dependencies."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @types/lodash --dev\n")),(0,r.kt)("p",null,"Import your lodash method however you want, DTS will optimize it like so."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// ./src/index.ts\nimport kebabCase from 'lodash/kebabCase';\n\nexport const KebabLogger = (msg: string) => {\n  console.log(kebabCase(msg));\n};\n")),(0,r.kt)("p",null,"For brevity let's look at the ES module output."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'import o from"lodash-es/kebabCase";const e=e=>{console.log(o(e))};export{e as KebabLogger};\n//# sourceMappingURL=test-react-dts-cli.esm.production.js.map\n')),(0,r.kt)("p",null,"DTS will rewrite your ",(0,r.kt)("inlineCode",{parentName:"p"},"import kebabCase from 'lodash/kebabCase'")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"import o from 'lodash-es/kebabCase'"),". This allows your library to be treeshakable to end consumers while allowing to you to use ",(0,r.kt)("inlineCode",{parentName:"p"},"@types/lodash")," for free."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: DTS will also transform destructured imports. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"import { kebabCase } from 'lodash'"),' would have also been transformed to `import o from "lodash-es/kebabCase".')),(0,r.kt)("h2",{id:"error-extraction"},"Error extraction"),(0,r.kt)("p",null,"After running ",(0,r.kt)("inlineCode",{parentName:"p"},"--extractErrors"),", you will have a ",(0,r.kt)("inlineCode",{parentName:"p"},"./errors/codes.json")," file with all your extracted ",(0,r.kt)("inlineCode",{parentName:"p"},"invariant")," error codes. This process scans your production code and swaps out your ",(0,r.kt)("inlineCode",{parentName:"p"},"invariant")," error message strings for a corresponding error code (just like React!). This extraction only works if your error checking/warning is done by a function called ",(0,r.kt)("inlineCode",{parentName:"p"},"invariant"),"."),(0,r.kt)("p",null,"Note: We don't provide this function for you, it is up to you how you want it to behave. For example, you can use either ",(0,r.kt)("inlineCode",{parentName:"p"},"tiny-invariant")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"tiny-warning"),", but you must then import the module as a variable called ",(0,r.kt)("inlineCode",{parentName:"p"},"invariant")," and it should have the same type signature."),(0,r.kt)("p",null,"\u26a0\ufe0fDon't forget: you will need to host the decoder somewhere. Once you have a URL, look at ",(0,r.kt)("inlineCode",{parentName:"p"},"./errors/ErrorProd.js")," and replace the ",(0,r.kt)("inlineCode",{parentName:"p"},"reactjs.org")," URL with yours."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Known issue: our ",(0,r.kt)("inlineCode",{parentName:"p"},"transformErrorMessages"),' babel plugin currently doesn\'t have sourcemap support, so you will see "Sourcemap is likely to be incorrect" warnings. ',(0,r.kt)("a",{parentName:"p",href:"https://github.com/palmerhq/tsdx/issues/184"},"We would love your help on this."))),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"TODO: Simple guide to host error codes to be completed")))}p.isMDXComponent=!0;var u={editThisPagePath:"docs/pages/optimization.mdx"};for(var d in u)window[d]=u[d]},673:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/optimization",function(){return t(4404)}])},6864:function(e,n,t){"use strict";function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},o.apply(this,arguments)}t.d(n,{Z:function(){return o}})},4730:function(e,n,t){"use strict";function o(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}t.d(n,{Z:function(){return o}})}},function(e){e.O(0,[774,888,179],(function(){return n=673,e(e.s=n);var n}));var n=e.O();_N_E=n}]);